/////////////////////////////////////////////////
/////////////////////////////////////////////////
//// SchemeSCSS v1.0
////
//// Copyright 2016 Bass Jobsen
//// Original code in Less at https://github.com/rriepe/1pxdeep
//// Licensed under the Apache License v2.0
//// http://www.apache.org/licenses/LICENSE-2.0
////
/////////////////////////////////////////////////
/////////////////////////////////////////////////



///////////////////////////
////Color functions
///////////////////////////


@function luma($color){

  $r: red($color);
  $g: green($color);
  $b: blue($color);
  
  @return (0.2126 * $r / 255 + 0.7152 * $g / 255 + 0.0722 * $b / 255) * alpha($color) * 100%;
  
}

@function spin(
    $color, 
    $amount
) {
    $hue: (hue($color) + $amount) % 360;
    @return if($hue < 0, hsl(360 + $hue, saturation($color), lightness($color)),hsl($hue, saturation($color), lightness($color)));
}



// contrasts text against a given background color
@function contrast-color ($color, $luma-upper-break: $luma-upper-break) {
  @return if(luma($color) >= $luma-upper-break, mix(darken($color,30%),#222) ,#fff);
}

//// Luma breaks
///////////////////////////

// Change these for different contrast cutoff points

$luma-upper-break:80%;
$luma-lower-break:16%;

//// Relative changes to subcolors (lightness, saturation)
///////////////////////////

// Customize these for different relative a, b and c colors

$contrast:1;

$color-a-sat:(8%*$contrast);
$color-a-lit:(15%*$contrast);

$color-b-sat:(7%*$contrast);
$color-b-lit:(5%*$contrast);

$color-c-sat:(3%*$contrast);
$color-c-lit:(8%*$contrast);

///////////////////////////
////Scheme building
///////////////////////////

//// Beginning color values
///////////////////////////

$sat:saturation($seed-color);
$luma:luma($seed-color);
$lit:lightness($seed-color);
$tone:desaturate($seed-color,100%);

//// Color creation
///////////////////////////

//This makes the scheme's colors using the wheel positions

$l-factor:$luma; // what we'll use for the L in HSL

$color1:$seed-color;
$color1theme:hsl(hue(spin($seed-color,0)),$sat,$l-factor); // a color 1 alternate, to keep a, b and c colors consistent

$color1a:darken(saturate($color1theme,$color-a-sat), $color-a-lit);
$color1b:darken(saturate($color1theme,$color-b-sat), $color-b-lit);
$color1c:lighten(desaturate($color1theme,$color-c-sat), $color-c-lit);

$color2:hsl(hue(spin($seed-color,$wheel_pos1)),$sat,$l-factor);

$color2a:darken(saturate($color2,$color-a-sat), $color-a-lit);
$color2b:darken(saturate($color2,$color-b-sat), $color-b-lit);
$color2c:lighten(desaturate($color2,$color-c-sat), $color-c-lit);

$color3:hsl(hue(spin($seed-color,$wheel_pos2)),$sat,$l-factor);

$color3a:darken(saturate($color3,$color-a-sat), $color-a-lit);
$color3b:darken(saturate($color3,$color-b-sat), $color-b-lit);
$color3c:lighten(desaturate($color3,$color-c-sat), $color-c-lit);

$color4:hsl(hue(spin($seed-color,$wheel_pos3)),$sat,$l-factor);

$color4a:darken(saturate($color4,$color-a-sat), $color-a-lit);
$color4b:darken(saturate($color4,$color-b-sat), $color-b-lit);
$color4c:lighten(desaturate($color4,$color-c-sat), $color-c-lit);

$scheme-colors: (
'color1': $color1,
'color1a': $color1a,
'color1b': $color1b,
'color1c': $color1c,
'color2': $color2,
'color2a': $color2a,
'color2b': $color2b,
'color2c': $color2c,
'color3': $color3,
'color3a': $color3a,
'color3b': $color3b,
'color3c': $color3c,
'color4': $color4,
'color4a': $color4a,
'color4b': $color4b,
'color4c': $color4c
);

///////////////////////////
//// Mix-ins


//// Schemify
///////////////////////////

// brings outside colors more in line with the current scheme

@mixin schemify($color) { //schemifies a background color
    $mix-weight:60%;
    $new-color:mix(hsl(hue($color),$sat,$luma),$color,$mix-weight);
    background:$new-color;
    color: contrast-color($new-color);
}

@mixin schemify-text($color) {
    $mix-weight:60%;
    $new-color:mix(hsl(hue($color),$sat,$luma),$color,$mix-weight);
    color:$new-color;
}
